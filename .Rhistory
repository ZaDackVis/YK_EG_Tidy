species <- species[order(species),]
species <- consensus$tip.label
species <- as.data.frame(species)
species <- species[order(species),]
WF_ARU_PC_Spec <- WF_ARU_PC[c(2:57)]
WF_ARU_PC_Spec <- names(WF_ARU_PC_Spec)
WF_Sci_Species <- names(WF_All_Zones)
WF_Sci_Species <- as.data.frame(WF_Species)
WF_Sci_Species <- WF_Species[order(WF_Species),]
species <- consensus$tip.label
species <- as.data.frame(species)
species <- species[order(species),]
consensus <- consensus.edges(treefile, consensus.tree=consensus(treefile,p=0.5))
treefile <- read.nexus("Phylo_tree/output.nex")
consensus <- consensus.edges(treefile, consensus.tree=consensus(treefile,p=0.5))
plotTree(consensus, fsize=0.6)
species <- consensus$tip.label
species <- consensus$tip.label
species <- as.data.frame(species)
species <- species[order(species),]
species
consensus <- consensus.edges(treefile, consensus.tree=consensus(treefile,p=0.5))
consensus <- consensus.edges(treefile, consensus.tree=consensus(treefile,p=0.5))
consensus <- consensus.edges(treefile, consensus.tree=consensus(treefile,p=0.5))
treefile <- read.nexus("Phylo_tree/output.nex")
consensus <- consensus.edges(treefile, consensus.tree=consensus(treefile,p=0.5))
plotTree(consensus, fsize=0.6)
species <- consensus$tip.label
species <- as.data.frame(species)
species <- species[order(species),]
species
WF_Sci_names <- read.csv("WF_ARU_PC_Sci_Names.csv")
WF_ARU_PC <- read.csv("WF_ASU_PC.csv")
WF_ARU_PC <- read.csv("WF_ARU_PC.csv")
View(WF_Sci_names)
View(WF_ARU_PC)
names(WF_Sci_names)[names(WF_Sci_names) == "Acanthis_flammea"] <- "Carduelis_flammea"
All_Sites_by_Zone <- WF_Sci_names %>%
group_by(WF_Sci_names$Site_Zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
Check <- WF_ARU_PC %>%
group_by(WF_ARU_PC$Site_Zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
View(All_Sites_by_Zone)
View(Check)
View(Check)
View(All_Sites_by_Zone)
Check <- column_to_rownames(check,"WF_ARU_PC$Site_Zone")
All_Sites_by_Zone <- column_to_rownames(All_Sites_by_Zone, "WF_Sci_names$Site_Zone")
Check <- column_to_rownames(Check,"WF_ARU_PC$Site_Zone")
View(All_Sites_by_Zone)
View(Check)
WF_All_Zones <- WF_Sci_names %>%
group_by(WF_Sci_names$zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
WF_All_Zones <- column_to_rownames(WF_All_Zones, "WF_Sci_names$zone")
View(WF_All_Zones)
names(All_Sites_by_Zone)
names(Check)
View(All_Sites_by_Zone)
View(Check)
rm(All_Sites_by_Zone)
rm(Check)
rm(treefile)
rm(WF_All_Zones)
rm(WF_ARU_PC)
rm(WF_Sci_names)
###The goal of this script is to compile and tidy all of the data as needed...
library(readxl)
library(tidyverse)
library(vegan)
setwd("C:/Users/DackZ/Documents/R/Yukon_Birds/0_Data")
pipe <- "~/R/Yukon_Birds/1_Pipe"
YK_ARU_PC <- read_csv("Raw_YK_ARU_Data_2019.csv")
YK_ARU_PC <- subset(YK_ARU_PC, transcriber == 'jf_jet@hotmail.com',)
#seperate the recording time from recording date (redundant column).
YK_ARU_PC <- separate(YK_ARU_PC, recording_time, c( "R_time", "remove"), sep = " ", TRUE, FALSE, "warn")
#get rid of unecessary variables.
YK_ARU_PC$remove <- NULL   #nothing in this colum
YK_ARU_PC$transcriber <- NULL #All are JF
YK_ARU_PC$is_buffered_location <- NULL #all are buffered
YK_ARU_PC$latitude <- NULL #empty and will be filled later.
YK_ARU_PC$longitude <- NULL #empty and will be filled later
YK_ARU_PC$method <- NULL   #All are the same
YK_ARU_PC$confidence <- NULL   #only going to accept high confidence
YK_ARU_PC$T_Id <- NULL          #unecessary.
YK_ARU_PC$min4_voc <- NULL          #surveys only go until 3 minutes.
YK_ARU_PC$min4_start <- NULL
YK_ARU_PC$min5_voc <- NULL
YK_ARU_PC$min5_start <- NULL
YK_ARU_PC$min6_voc <- NULL
YK_ARU_PC$min6_start <- NULL
YK_ARU_PC$min7_voc <- NULL
YK_ARU_PC$min7_start <- NULL
YK_ARU_PC$min8_voc <- NULL
YK_ARU_PC$min8_start  <- NULL
YK_ARU_PC$min9_voc     <- NULL
YK_ARU_PC$min9_start <- NULL
##Create columns that can be used to match YK_Locations to the ARU_PC file
YK_ARU_PC$site <- as.factor(YK_ARU_PC$site)
YK_ARU_PC$station <- as.factor(YK_ARU_PC$station)
YK_ARU_PC$location <- paste(YK_ARU_PC$site,"_",YK_ARU_PC$station, sep = "")
#Rearrange everything.
YK_ARU_PC <- YK_ARU_PC[c("location",
"site",
"station",
"recording_date",
"R_time",
"species_code",
"scientific_name",
"species_english_name",
"rain",
"wind",
"noise",
"industry_noise",
"audio_quality" ,
"species_individual_name",
"abundance",
"min0_voc",
"min0_start",
"min1_voc",
"min1_start",
"min2_voc",
"min2_start",
"min3_voc",
"min3_start",
"comment",
"species_comment",
"project",
"data_set")]
#all of this data is from ARU recordings.
YK_ARU_PC$survey_type <- "ARU"
#Make a master key for each survey
YK_ARU_PC$surv_key <- paste(YK_ARU_PC$site,'_',
YK_ARU_PC$station,'_',
YK_ARU_PC$recording_date,'_',
YK_ARU_PC$R_time,'_',
YK_ARU_PC$survey_type,
sep = "")
##Split the location in to "zone"
YK_ARU_PC <- separate(YK_ARU_PC,
col = "station",
into = c("zone", "stat_num"),
sep = 1,
remove = TRUE,
)
YK_ARU_PC$location  <- as.character(YK_ARU_PC$location)
ARU_Locations <- unique(YK_ARU_PC$location)
ARU_Locations <- as.data.frame(ARU_Locations)
#start sorting through the data to get rid of anything I don't want...
#Make sure all data is actually completed...
YK_ARU_PC <- subset(YK_ARU_PC, status == 'Transcribed')
YK_ARU_PC$status <- NULL
#get rid of observatins of wind, traffic, etc.
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "LIWI")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "LIAI")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "LIRA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "MOWI")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "LITR")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "MOTR")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "HEWI")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "MOBA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "MORA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "HEBA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "LIBA")
#Remove any mammal/non-bird species
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "WOLF")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNMA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "COPI")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "RESQ")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "AGSQ")
# get rid of any unknown birds.
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNWA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNFI")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNPA")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNKN")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNSP")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNTH")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNTR")
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "UNBT")
# get rid of observations of "NONE"?
YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "NONE")
# get rid of the single instance of "GCRF"?
#YK_ARU_PC = YK_ARU_PC %>% filter(species_code != "GCRF")
YK_ARU_PC$scientific_name <- gsub(" ","_",YK_ARU_PC$scientific_name)
#write that as a new "Tidy'd" CSV.
write.csv(YK_ARU_PC,
file = "YK_ARU_PC_Tidy.csv")
rm(YK_ARU_PC)
YK_ARU_PC <- read.csv("YK_ARU_PC_Tidy.csv")
YK_ARU_PC$counter <- 1
WF_ARU_PC <- tapply(YK_ARU_PC$counter,
list(YK_ARU_PC$surv_key,
YK_ARU_PC$species_code)
, sum, na.rm=TRUE)
YK_ARU_PC$counter <- NULL
WF_ARU_PC[is.na(WF_ARU_PC)] <- 0
WF_ARU_PC <- as.data.frame(WF_ARU_PC)
WF_ARU_PC <- rownames_to_column(WF_ARU_PC,
var = "surv_key")
#Add the smaller level identifiers (location, site, station)
joiner <- YK_ARU_PC[c("surv_key","location","site","zone","stat_num")]
joiner <- unique(joiner)
WF_ARU_PC <- left_join(WF_ARU_PC,
joiner,
by = "surv_key")
rm(joiner)
WF_ARU_PC <- column_to_rownames(WF_ARU_PC,
var = "surv_key")
WF_ARU_PC$Site_Zone <- paste(WF_ARU_PC$site,"_",WF_ARU_PC$zone, sep="")
YK_ARU_PC <- read.csv("YK_ARU_PC_Tidy.csv")
YK_ARU_PC$counter <- 1
WF_Sci_name_ARU_PC <- tapply(YK_ARU_PC$counter,
list(YK_ARU_PC$surv_key,
YK_ARU_PC$scientific_name)
, sum, na.rm=TRUE)
YK_ARU_PC$counter <- NULL
WF_Sci_name_ARU_PC[is.na(WF_Sci_name_ARU_PC)] <- 0
WF_Sci_name_ARU_PC <- as.data.frame(WF_Sci_name_ARU_PC)
WF_Sci_name_ARU_PC <- rownames_to_column(WF_Sci_name_ARU_PC,
var = "surv_key")
#Add the smaller level identifiers (location, site, station)
joiner <- YK_ARU_PC[c("surv_key","location","site","zone","stat_num")]
joiner <- unique(joiner)
WF_Sci_name_ARU_PC <- left_join(WF_Sci_name_ARU_PC,
joiner,
by = "surv_key")
rm(joiner)
WF_Sci_name_ARU_PC <- column_to_rownames(WF_Sci_name_ARU_PC,
var = "surv_key")
WF_Sci_name_ARU_PC$Site_Zone <- paste(WF_Sci_name_ARU_PC$site,"_",WF_Sci_name_ARU_PC$zone, sep="")
YK_ARU_PC <- read.csv("YK_ARU_PC_Tidy.csv")
YK_ARU_PC$counter <- 1
WF_Com_Name_ARU_PC <- tapply(YK_ARU_PC$counter,
list(YK_ARU_PC$surv_key,
YK_ARU_PC$species_english_name)
, sum, na.rm=TRUE)
YK_ARU_PC$counter <- NULL
WF_Com_Name_ARU_PC[is.na(species_english_name)] <- 0
WF_Com_Name_ARU_PC <- as.data.frame(species_english_name)
WF_Com_Name_ARU_PC <- rownames_to_column(species_english_name,
var = "surv_key")
#Add the smaller level identifiers (location, site, station)
joiner <- YK_ARU_PC[c("surv_key","location","site","zone","stat_num")]
joiner <- unique(joiner)
WF_Com_Name_ARU_PC <- left_join(WF_Com_Name_ARU_PC,
joiner,
by = "surv_key")
rm(joiner)
WF_Com_Name_ARU_PC <- column_to_rownames(WF_Com_Name_ARU_PC,
var = "surv_key")
WF_Com_Name_ARU_PC$Site_Zone <- paste(WF_Com_Name_ARU_PC$site,"_",WF_Com_Name_ARU_PC$zone, sep="")
View(WF_Com_Name_ARU_PC)
WF_Com_Name_ARU_PC[is.na(WF_Com_Name_ARU_PC)] <- 0
WF_Com_Name_ARU_PC <- as.data.frame(species_english_name)
View(WF_Com_Name_ARU_PC)
WF_Com_Name_ARU_PC <- as.data.frame(WF_Com_Name_ARU_PC)
WF_Com_Name_ARU_PC <- rownames_to_column(species_english_name,
var = "surv_key")
View(WF_Com_Name_ARU_PC)
WF_Com_Name_ARU_PC <- rownames_to_column(WF_Com_Name_ARU_PC,
var = "surv_key")
joiner <- YK_ARU_PC[c("surv_key","location","site","zone","stat_num")]
joiner <- unique(joiner)
WF_Com_Name_ARU_PC <- left_join(WF_Com_Name_ARU_PC,
joiner,
by = "surv_key")
rm(joiner)
WF_Com_Name_ARU_PC <- column_to_rownames(WF_Com_Name_ARU_PC,
var = "surv_key")
WF_Com_Name_ARU_PC$Site_Zone <- paste(WF_Com_Name_ARU_PC$site,"_",WF_Com_Name_ARU_PC$zone, sep="")
write.csv(WF_Com_Name_ARU_PC, "WF_ARU_Com_Names.csv")
names(YK_ARU_Species)
YK_ARU_PC
names(YK_ARU_PC)
YK_ARU_Species <- YK_ARU_PC[c("species_code","species_english_name","scientific_name")]
YK_ARU_Species <- distinct(YK_ARU_Species)
View(YK_ARU_Species)
Taxa <- read.csv("Species_Taxonomy_Reference.csv")
rm(WF_ARU_PC)
rm(WF_Com_Name_ARU_PC)
rm(WF_Scie_name_ARU_PC)
rm(WF_Sci_name_ARU_PC)
rm(YK_ARU_PC)
YK_ARU_Species
rm(YK_ARU_Species)
rm(ARU_Locations)
rm(pipe)
rm(species)
WF_ARU_PC <- read.csv("WF_ARU_PC.csv")
View(WF_ARU_PC)
WF_ARU_PC <- read.csv("WF_ARU_PC.csv")
All_Sites_by_Zone <- WF_ARU_PC %>%
group_by(WF_Sci_names$Site_Zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
All_Sites_by_Zone <- WF_ARU_PC %>%
group_by(WF_ARU_PC$Site_Zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
All_Sites_by_Zone <- column_to_rownames(All_Sites_by_Zone, "WF_ARU_PC$Site_Zone")
View(All_Sites_by_Zone)
View(Taxa)
View(WF_ARU_PC)
names(WF_ARU_PC
)
View(Taxa)
View(WF_ARU_PC)
Taxa <- read.csv("Species_Taxonomy_Reference.csv")
View(Taxa)
YK_ARU_PC <- read.csv("YK_ARU_PC_Tidy.csv")
YK_ARU_PC$counter <- 1
WF_Com_Name_ARU_PC <- tapply(YK_ARU_PC$counter,
list(YK_ARU_PC$surv_key,
YK_ARU_PC$species_english_name)
, sum, na.rm=TRUE)
YK_ARU_PC$counter <- NULL
WF_Com_Name_ARU_PC[is.na(WF_Com_Name_ARU_PC)] <- 0
WF_Com_Name_ARU_PC <- as.data.frame(WF_Com_Name_ARU_PC)
WF_Com_Name_ARU_PC <- rownames_to_column(WF_Com_Name_ARU_PC,
var = "surv_key")
joiner <- YK_ARU_PC[c("surv_key","location","site","zone","stat_num")]
joiner <- unique(joiner)
WF_Com_Name_ARU_PC <- left_join(WF_Com_Name_ARU_PC,
joiner,
by = "surv_key")
rm(joiner)
WF_Com_Name_ARU_PC <- column_to_rownames(WF_Com_Name_ARU_PC,
var = "surv_key")
WF_Com_Name_ARU_PC$Site_Zone <- paste(WF_Com_Name_ARU_PC$site,"_",WF_Com_Name_ARU_PC$zone, sep="")
View(WF_Com_Name_ARU_PC)
View(WF_ARU_PC)
write.csv(WF_Com_Name_ARU_PC, "WF_AOU_ARU.csv")
AOU <- read.csv("WF_AOU_ARU.csv")
names(AOU)
Taxa
YK_ARU_PC <- read.csv("YK_ARU_PC_Tidy.csv")
YK_ARU_PC$counter <- 1
WF_ARU_Alpha_codes <- tapply(YK_ARU_PC$counter,
list(YK_ARU_PC$surv_key,
YK_ARU_PC$species_code)
, sum, na.rm=TRUE)
YK_ARU_PC$counter <- NULL
WF_ARU_Alpha_codes[is.na(WF_ARU_Alpha_codes)] <- 0
WF_ARU_Alpha_codes <- as.data.frame(WF_ARU_Alpha_codes)
WF_ARU_Alpha_codes <- rownames_to_column(WF_ARU_Alpha_codes,
var = "surv_key")
joiner <- YK_ARU_PC[c("surv_key","location","site","zone","stat_num")]
joiner <- unique(joiner)
WF_ARU_Alpha_codes <- left_join(WF_ARU_Alpha_codes,
joiner,
by = "surv_key")
rm(joiner)
WF_ARU_Alpha_codes <- column_to_rownames(WF_ARU_Alpha_codes,
var = "surv_key")
WF_ARU_Alpha_codes$Site_Zone <- paste(WF_ARU_Alpha_codes$site,"_",WF_ARU_Alpha_codes$zone, sep="")
View(WF_ARU_Alpha_codes)
write.csv(WF_ARU_Alpha_codes, "WF_ARU_Alpha.csv")
AOU <- read.csv("WF_ARU_Alpha.csv")
AOU <- read.csv("WF_ARU_Alpha.csv")
View(AOU)
names(AOU)names[AOU=="AMPI"] <- "Anthus_rubescens"
names(AOU)[names[AOU=="AMPI"] <- "Anthus_rubescens"
View(AOU)
View(AOU)
names(AOU)[names(AOU=="AMPI")] <- "Anthus_rubescens"
names(AOU)
AOU <- names(AOU)[names(AOU=="AMPI")] <- "Anthus_rubescens"
AOU <- read.csv("WF_ARU_Alpha.csv")
names(AOU)[names(AOU)=="AMPI"] <- "Anthus_rubescens"
names(AOU)
AOU <- read.csv("WF_ARU_Alpha.csv")
names(Taxa)
Taxa
AOU <- left_join(AOU, Taxa, by = "alpha_codes")
AOU <- read.csv("WF_ARU_Alpha.csv")
AOU <- t(AOU)
AOU
AOU <- as.data.frame(AOU)
View(AOU)
AOU <- rownames_to_column(AOU, "alpha_code")
View(AOU)
AOU <- left_join(AOU, Taxa, "alpha_code")
names(Taxa)
AOU <- read.csv("WF_ARU_Alpha.csv")
AOU <- t(AOU)
AOU <- as.data.frame(AOU)
AOU <- rownames_to_column(AOU, "alpha_codes")
AOU <- left_join(AOU, Taxa, "alpha_codes")
View(AOU)
AOU <- column_to_rownames(AOU, "alpha_codes")
names(AOU)
AOU <- column_to_rownames(AOU, "Hackett_Taxa")
AOU <- rownames_to_column(AOU, "alpha_codes")
View(AOU)
AOU <- column_to_rownames(AOU, "Hackett_Taxa")
View(AOU)
AOU <- read.csv("WF_ARU_Alpha.csv")
View(AOU)
AOU <- column_to_rownames(AOU, "X")
AOU <- t(AOU)
AOU <- as.data.frame(AOU)
AOU <- read.csv("WF_ARU_Alpha.csv")
names(AOU)
Location_Data <- AOU[c("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[-c("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[-c(,"location","site","zone","stat_num","Site_Zone")]
AOU <- AOU %>% -c("location","site","zone","stat_num","Site_Zone")
AOU <- AOU %>% -c(,"location","site","zone","stat_num","Site_Zone")
AOU <- AOU %>% -c("location","site","zone","stat_num","Site_Zone",)
AOU <- AOU[-c("location","site","zone","stat_num","Site_Zone")]
names(AOU)
AOU <- AOU[-c("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU-[c("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[-c("location","site","zone","stat_num","Site_Zone")]
AOU <- -c("location","site","zone","stat_num","Site_Zone")
AOU <- [-c("location","site","zone","stat_num","Site_Zone")]
AOU <- -c["location","site","zone","stat_num","Site_Zone")]
AOU <- -c["location","site","zone","stat_num","Site_Zone"]
AOU <- AOU[,-c("location","site","zone","stat_num","Site_Zone")]
AOU[,-c("location","site","zone","stat_num","Site_Zone")]
AOU[-c("location","site","zone","stat_num","Site_Zone")]
AOU <- -c(,"location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[,-c("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[,("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[("location","site","zone","stat_num","Site_Zone")]
AOU <- AOU[AOU==c("location","site","zone","stat_num","Site_Zone")] <- NULL
AOU <- read.csv("WF_ARU_Alpha.csv")
AOU[AOU==c("location","site","zone","stat_num","Site_Zone")] <- NULL
View(All_Sites_by_Zone)
View(AOU)
AOU[AOU==c("location","site","zone","stat_num","Site_Zone")] <- NULL
AOU <- read.csv("WF_ARU_Alpha.csv")
AOU[AOU==c("location","site","zone","stat_num","Site_Zone")] <- NULL
View(AOU)
View(All_Sites_by_Zone)
View(All_Sites_by_Zone)
View(WF_ARU_PC)
WF_All_Zones <- WF_ARU_PC %>%
group_by(WF_ARU_PC$zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
WF_All_Zones <- column_to_rownames(WF_All_Zones, "WF_ARU_PC$zone")
View(WF_All_Zones)
View(All_Sites_by_Zone)
WF_All_Zones <- t(WF_All_Zones)
WF_All_Zones <- as.data.frame(WF_All_Zones)
WF_All_Zones <- as.data.frame(WF_All_Zones)
View(WF_All_Zones)
WF_All_Zones <- rownames_to_column(WF_All_Zones,"alpha_codes")
WF_All_Zones <- left_join(WF_All_Zones, Taxa, "alpha_codes")
View(WF_All_Zones)
WF_All_Zones <- column_to_rownames(WF_All_Zones, var = "Hackett_Taxa")
View(WF_All_Zones)
WF_All_Zones$species_AOU_name <- NULL
rm(AOU)
View(WF_All_Zones)
WF_All_Zones$alpha_codes <- NULL
View(WF_All_Zones)
WF_All_Zones <- t(WF_All_Zones)
WF_All_Zones <- as.data.frame(WF_All_Zones)
View(WF_All_Zones)
names(WF_All_Zones)
consensus$tip.label
rm(All_Sites_by_Zone)
rm(Location_Data)
rm(WF_All_Zones)
rm(WF_ARU_Alpha_codes)
rm(WF_ARU_PC)
rm(WF_Com_Name_ARU_PC)
rm(YK_ARU_PC)
rm(Taxa)
WF_ARU_PC <- read.csv("WF_ARU_PC.csv")
WF_All_Zones <- WF_ARU_PC %>%
group_by(WF_ARU_PC$zone) %>%
summarise_at(c(2:57), sum, na.rm = FALSE)
Taxa <- read.csv("Species_Taxonomy_Reference.csv")
WF_All_Zones <- column_to_rownames(WF_All_Zones, "WF_ARU_PC$zone")
WF_All_Zones <- t(WF_All_Zones)
WF_All_Zones <- as.data.frame(WF_All_Zones)
WF_All_Zones <- rownames_to_column(WF_All_Zones,"alpha_codes")
WF_All_Zones <- left_join(WF_All_Zones, Taxa, "alpha_codes")
WF_All_Zones <- column_to_rownames(WF_All_Zones, var = "Hackett_Taxa")
WF_All_Zones$alpha_codes <- NULL
WF_All_Zones$species_AOU_name <- NULL
WF_All_Zones <- t(WF_All_Zones)
WF_All_Zones <- as.data.frame(WF_All_Zones)
plotTree(consensus, fsize=0.6)
Faith_Index_All_Zones <- pd(WF_All_Zones, consensus, include.root	= FALSE)
Faith_Index_All_Zones
Zonal_Phylo_Div_Faith <- hill_phylo(WF_All_Zones, consensus, q = 0)
Zonal_Phylo_Div_Entropy <- hill_phylo(WF_All_Zones, consensus, q = 1)
Zonal_Phylo_Div_Rao <- hill_phylo(WF_All_Zones, consensus, q = 2)
Zonal_Phylo_Div_Faith
Zonal_Phylo_Div_Entropy
Zonal_Phylo_Div_Rao
Faith_Index_All_Zones
Zonal_Phylo_Div_Faith
Faith_Index_All_Zones <- pd(WF_All_Zones, consensus, include.root	= TRUE)
Faith_Index_All_Zones
Zonal_Phylo_Div_Faith
Zonal_Phylo_Div_Entropy
Zonal_Phylo_Div_Rao
plot(5,1000,c(819.2587,213.4079,143.0078))
plot(Zonal_Phylo_Div_Entropy)
plot(Zonal_Phylo_Div_Faith, add = TRUE)
library(ggtree)
warnings()
library(ggtree)
Zonal_Phylo_Div_Faith <- hill_phylo(WF_All_Zones, consensus, q = 0)
Zonal_Phylo_Div_Faith <- hill_phylo(WF_All_Zones, consensus, q = 0)
Zonal_Phylo_Div_Entropy <- hill_phylo(WF_All_Zones, consensus, q = 1)
Zonal_Phylo_Div_Faith
Zonal_Phylo_Div_Entropy
Zonal_Phylo_Div_Rao
